}
}
alpha_string46(s)
s <- "a234"
alpha_string46(s)
s <- 1234
alpha_string46 <- function(s) {
if((nchar(s) == 4 | nchar(s) == 6) & grepl("[0-9]", s) == F) {
return(T)
} else {
return(F)
}
}
alpha_string46(s)
s <- 1234
alpha_string46(s)
grep("[0-9]+", s)
s <- 1234
grepl("[0-9]+", s)
alpha_string46 <- function(s) {
if((nchar(s) == 4 | nchar(s) == 6) & grepl("[0-9]", s) == T) {
return(T)
} else {
return(F)
}
}
alpha_string46(s)
s <- 1234
alpha_string46(s)
s<- "abce"
alpha_string46(s)
s <- "a234"
alpha_string46(s)
alpha_string46 <- function(s) {
if((nchar(s) == 4 | nchar(s) == 6) & grepl("[A-Za-z]", s) == T) {
return(T)
} else {
return(F)
}
}
alpha_string46(s)
s <- 1234
alpha_string46(s)
alpha_string46 <- function(s) {
if((nchar(s) == 4 | nchar(s) == 6) & grepl("[A-Za-z]", s) == F) {
return(T)
} else {
return(F)
}
}
alpha_string46(s)
s<- "abce"
alpha_string46(s)
s <- "a234"
alpha_string46(s)
s <- 1234
alpha_string46(s)
grep(p, "ppwep")
grep("p", "ppwep")
# 알고리즘 Level 1
library(stringr)
str_count("ppeadp", "p")
numPY <- function(s) {
if(str_count(tolower(s), "p") == str_count(tolower(s), "y")) return(T)
return(F)
}
numpy("ppyy")
numPY("ppyy")
numPY("ppewfdplyy")
numPY("ppewfdplyyy")
numPY("pPewfdplYY")
numPY("pPewfdplYYy")
numPY("YYYyyyppp")
numPY("YyYppP")
numPY("YyYwedppP")
printTriangle <- function(num) {
printTriangle <- function(num) {
for(i in 1:num) {
print(paste("*"*i, "\n"))
}
}
printTriangle <- function(num) {
for(i in 1:num) {
print(paste("*"*i, "\n"))
}
}
printTriangle(1)
print("*"*2)
print(*)
print("*")
print("*"*2)
print("*"*2)
print("*"^2)
print("**2")
print("*^2")
star <- c()
star <- c()
printTriangle <- function(num) {
for(i in 1:num) {
star <- c(star, "*", "\n")
print(star)
}
}
printTriangle(2)
star <- c()
printTriangle <- function(num) {
for(i in 1:num) {
star <- c(star, "*\n")
print(star)
}
}
printTriangle(2)
star <- c()
printTriangle <- function(num) {
for(i in 1:num) {
star <- c(star, "*")
print(star)
}
}
printTriangle(2)
printTriangle(2)
printTriangle(3)
star <- c()
printTriangle <- function(num) {
for(i in 1:num) {
star <- c(star, "*")
return(star)
}
}
printTriangle(3)
star <- c()
printTriangle <- function(num) {
for(i in 1:num) {
star <- c(star, "*")
return(star)
}
}
printTriangle(3)
printTriangle(1)
printTriangle(2)
printTriangle(3)
star <- c()
printTriangle <- function(num) {
for(i in 1:num) {
star <- c(star, "*")
}
return(star)
}
printTriangle(3)
star <- c()
printTriangle <- function(num) {
for(i in 1:num) {
star <- c(star, "*")
return(star)
}
}
printTriangle(3)
star <- c()
printTriangle <- function(num) {
for(i in 1:num) {
star <- c(star, "*")
print(star)
}
}
printTriangle(3)
star <- c()
printTriangle <- function(num) {
for(i in 1:num) {
star <- paste(star, "*")
print(star)
}
}
printTriangle(3)
star <- c()
printTriangle <- function(num) {
for(i in 1:num) {
star <- paste(star, "*", sep="")
print(star)
}
}
printTriangle(3)
star <- c()
printTriangle <- function(num) {
for(i in 1:num) {
star <- paste(star, "*")
print(star)
}
}
printTriangle(3)
printTriangle <- function(num) {
star <- c()
for(i in 1:num) {
star <- paste(star, "*")
print(star)
}
}
printTriangle(3)
function printTriangle(num) {
var result = ''
for(i in 0:num){
for(j in 0:i){
result <- result + '*'
}
result <- result + '\n'
}
return(result)
}
function printTriangle(num) {
result <- ''
for(i in 0:num){
for(j in 0:i){
result <- result + '*'
}
result <- result + '\n'
}
return(result)
}
result <- ""
function printTriangle(num) {
result <- ""
for(i in 0:num){
for(j in 0:i){
result <- result + '*'
}
result <- result + '\n'
}
return(result)
}
"*" + "*"
print("*" + "*")
print("*"+"*")
function printTriangle(num) {
result <- ""
for(i in 0:num){
for(j in 0:i){
result <- c(result, '*')
}
result <- c(result + '\n')
}
return(result)
}
printTriangle <- function(num) {
result <- ""
for(i in 0:num){
for(j in 0:i){
result <- c(result, '*')
}
result <- c(result + '\n')
}
return(result)
}
printTriangle(3)
printTriangle <- function(num) {
result <- ""
for(i in 0:num){
for(j in 0:i){
result <- c(result, '*')
}
result <- c(result, '\n')
}
return(result)
}
printTriangle(3)
print(printTriangle(3))
printTriangle <- function(num) {
star <- c()
for(i in 1:num) {
star <- paste(star, "*")
print(star)
}
}
printTriangle(3)
strToInt <- function(str) {
as.numeric(str)
}
strToInt("1234")
a <- strToInt("1234")
class(a)
typeof(a)
a <- strToInt("-1234")
a
strToInt <- function(str) {
as.integer(str)
}
strToInt("1234")
strToInt("-1234")
a <- strToInt("-1234")
class9a
class(a)
typeof(a)
strToInt <- function(str) {
as.integer(str)
}
a <- strToInt("-1234")
a
class(a)
a <- matrix(c(1:4), nrow=2, byrow=T)
a
b <- matrix(c(3:6), nrow=2, byrow=T)
b
a+b
a
b
a+b
a <- matrix(c(1,2,2,3), nrow=2, byrow=T)
a
b <- matrix(c(3:6), nrow=2, byrow=T)
b
a+b
sumMatrix <- function(a, b) {
return(a+b)
}
sumMatrix(a, b)
a <- matrix(c(1:9), nrow=3, byrow=T)
a
b <- matrix(c(2:10), nrow=3, byrow=T)
b
sumMatrix(a, b)
a <- strToInt("-1234")
strToInt <- function(str) {as.integer(str)}
a <- strToInt("-1234")
class(a)
a
strToInt <- function(str) {return(as.integer(str))}
a <- strToInt("-1234")
a
a <- 01012341234
a
a <- "01012341234"
nchar(a)
str_sub(a, start = -4)
str_sub(a, start =1, end=-4)
str_sub(a, start =1, end=-5)
str_sub(a, start =0, end=-5)
str_sub(a, end=-5)
str_sub(a, start=-5)
str_sub(a, start=-4)
str_sub(a, end=-5)
str_sub(a, start=-4)
str_sub(a, end=-4)
str_sub(a, end=-5)
str_replace_all(a, str_sub(a, end=-5), "*")
nchar(str_sub(a, end=-5))
secureNum <- function(num) {
for(i in 1:nchar(str_sub(num, end=-5))) {
hide <- paste(hide, "*", sep="")
}
str_replace_all(num, str_sub(num, end=-5), hide)
}
secureNum(a)
secureNum <- function(num) {
hide <- c()
for(i in 1:nchar(str_sub(num, end=-5))) {
hide <- paste(hide, "*", sep="")
}
return(str_replace_all(num, str_sub(num, end=-5), hide))
}
secureNum(a)
a <- "0212341234"
secureNum(a)
nchar('01033334444')-4
(nchar('01033334444')-4)*'*'
list((nchar('01033334444')-4))*'*'
a[8:12]
result <- c()
number_generator <- function(x, n) {
result <- 1
for(i in 1:n) {
result <- result*x
}
}
number_generator <- function(x, n) {
result <- 1
for(i in 1:n) {
result <- c(result, result*x)
}
}
number_generator(4, 3)
number_generator <- function(x, n) {
result <- 1
for(i in 1:n) {
result <- c(result, result*x)
}
return(result)
}
number_generator(4, 3)
number_generator <- function(x, n) {
result <- 1
for(i in 1:n) {
result <- result*x
}
return(result)
}
number_generator(4, 3)
result <- c()
number_generator <- function(x, n) {
a <- 1
result <- c()
for(i in 1:n) {
a <- a*x
result <- c(result, a)
}
return(result)
}
number_generator(4, 3)
number_generator(2, 5)
number_generator <- function(x, n) {
a <- 1
result <- c()
for(i in 1:n) {
a <- a + x
result <- c(result, a)
}
return(result)
}
number_generator(2, 5)
a <- 0
number_generator <- function(x, n) {
result <- 0
for(i in 1:n) {
result <- c(result, result+x)
}
return(result)
}
number_generator(2, 5)
number_generator <- function(x, n) {
result <- c()
for(i in 1:n) {
a <- a + x
result <- c(result, result + x)
}
return(result)
}
number_generator(2, 5)
number_generator <- function(x, n) {
result <- 0
for(i in 1:n) {
a <- a + x
result <- c(result, result + x)
}
return(result)
}
number_generator(2, 5)
number_generator <- function(x, n) {
a <- 0
for(i in 1:n) {
a <- a + x
result <- c(result, a)
}
return(result)
}
number_generator(2, 5)
# 7. x만큼 간격이 있는 n개의 숫자
# number_generator함수는 x와 n을 입력 받습니다. 2와 5를 입력 받으면 2부터 시작해서
# 2씩 증가하는 숫자를 5개 가지는 리스트를 만들어서 리턴합니다. [2,4,6,8,10]
# 4와 3을 입력 받으면 4부터 시작해서 4씩 증가하는 숫자를 # 3개 가지는 리스트를
# 만들어서 리턴합니다. [4,8,12]
# 이를 일반화 하면 x부터 시작해서 x씩 증가하는 숫자를 n개 가지는 리스트를 리턴하도록
# 함수 number_generator를 완성하면 됩니다.
rm(result)
number_generator <- function(x, n) {
a <- 0
for(i in 1:n) {
a <- a + x
result <- c(result, a)
}
return(result)
}
number_generator(2, 5)
number_generator <- function(x, n) {
a <- 0
result <- c()
for(i in 1:n) {
a <- a + x
result <- c(result, a)
}
return(result)
}
number_generator(2, 5)
number_generator(4, 4)
number_generator <- function(x, n) {
result <- c()
for(i in 1:n) {
result <- c(result, x * i)
}
return(result)
}
number_generator(4, 4)
number_generator <- function(x, n) {
result <- c()
for(i in 1:n) {}
append(result, x*i)
}
number_generator <- function(x, n) {
result <- c()
for(i in 1:n) {
append(result, x*i)
}
return(result)
}
number_generator(4, 4)
result <- c()
append(result, 10)
append(result, 10)
number_generator <- function(x, n) {
result <- c()
for(i in 1:n) {
result <- append(result, x*i)
}
return(result)
}
number_generator(4, 4)
