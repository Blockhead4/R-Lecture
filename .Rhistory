return(result)
}
result <- ""
function printTriangle(num) {
result <- ""
for(i in 0:num){
for(j in 0:i){
result <- result + '*'
}
result <- result + '\n'
}
return(result)
}
"*" + "*"
print("*" + "*")
print("*"+"*")
function printTriangle(num) {
result <- ""
for(i in 0:num){
for(j in 0:i){
result <- c(result, '*')
}
result <- c(result + '\n')
}
return(result)
}
printTriangle <- function(num) {
result <- ""
for(i in 0:num){
for(j in 0:i){
result <- c(result, '*')
}
result <- c(result + '\n')
}
return(result)
}
printTriangle(3)
printTriangle <- function(num) {
result <- ""
for(i in 0:num){
for(j in 0:i){
result <- c(result, '*')
}
result <- c(result, '\n')
}
return(result)
}
printTriangle(3)
print(printTriangle(3))
printTriangle <- function(num) {
star <- c()
for(i in 1:num) {
star <- paste(star, "*")
print(star)
}
}
printTriangle(3)
strToInt <- function(str) {
as.numeric(str)
}
strToInt("1234")
a <- strToInt("1234")
class(a)
typeof(a)
a <- strToInt("-1234")
a
strToInt <- function(str) {
as.integer(str)
}
strToInt("1234")
strToInt("-1234")
a <- strToInt("-1234")
class9a
class(a)
typeof(a)
strToInt <- function(str) {
as.integer(str)
}
a <- strToInt("-1234")
a
class(a)
a <- matrix(c(1:4), nrow=2, byrow=T)
a
b <- matrix(c(3:6), nrow=2, byrow=T)
b
a+b
a
b
a+b
a <- matrix(c(1,2,2,3), nrow=2, byrow=T)
a
b <- matrix(c(3:6), nrow=2, byrow=T)
b
a+b
sumMatrix <- function(a, b) {
return(a+b)
}
sumMatrix(a, b)
a <- matrix(c(1:9), nrow=3, byrow=T)
a
b <- matrix(c(2:10), nrow=3, byrow=T)
b
sumMatrix(a, b)
a <- strToInt("-1234")
strToInt <- function(str) {as.integer(str)}
a <- strToInt("-1234")
class(a)
a
strToInt <- function(str) {return(as.integer(str))}
a <- strToInt("-1234")
a
a <- 01012341234
a
a <- "01012341234"
nchar(a)
str_sub(a, start = -4)
str_sub(a, start =1, end=-4)
str_sub(a, start =1, end=-5)
str_sub(a, start =0, end=-5)
str_sub(a, end=-5)
str_sub(a, start=-5)
str_sub(a, start=-4)
str_sub(a, end=-5)
str_sub(a, start=-4)
str_sub(a, end=-4)
str_sub(a, end=-5)
str_replace_all(a, str_sub(a, end=-5), "*")
nchar(str_sub(a, end=-5))
secureNum <- function(num) {
for(i in 1:nchar(str_sub(num, end=-5))) {
hide <- paste(hide, "*", sep="")
}
str_replace_all(num, str_sub(num, end=-5), hide)
}
secureNum(a)
secureNum <- function(num) {
hide <- c()
for(i in 1:nchar(str_sub(num, end=-5))) {
hide <- paste(hide, "*", sep="")
}
return(str_replace_all(num, str_sub(num, end=-5), hide))
}
secureNum(a)
a <- "0212341234"
secureNum(a)
nchar('01033334444')-4
(nchar('01033334444')-4)*'*'
list((nchar('01033334444')-4))*'*'
a[8:12]
result <- c()
number_generator <- function(x, n) {
result <- 1
for(i in 1:n) {
result <- result*x
}
}
number_generator <- function(x, n) {
result <- 1
for(i in 1:n) {
result <- c(result, result*x)
}
}
number_generator(4, 3)
number_generator <- function(x, n) {
result <- 1
for(i in 1:n) {
result <- c(result, result*x)
}
return(result)
}
number_generator(4, 3)
number_generator <- function(x, n) {
result <- 1
for(i in 1:n) {
result <- result*x
}
return(result)
}
number_generator(4, 3)
result <- c()
number_generator <- function(x, n) {
a <- 1
result <- c()
for(i in 1:n) {
a <- a*x
result <- c(result, a)
}
return(result)
}
number_generator(4, 3)
number_generator(2, 5)
number_generator <- function(x, n) {
a <- 1
result <- c()
for(i in 1:n) {
a <- a + x
result <- c(result, a)
}
return(result)
}
number_generator(2, 5)
a <- 0
number_generator <- function(x, n) {
result <- 0
for(i in 1:n) {
result <- c(result, result+x)
}
return(result)
}
number_generator(2, 5)
number_generator <- function(x, n) {
result <- c()
for(i in 1:n) {
a <- a + x
result <- c(result, result + x)
}
return(result)
}
number_generator(2, 5)
number_generator <- function(x, n) {
result <- 0
for(i in 1:n) {
a <- a + x
result <- c(result, result + x)
}
return(result)
}
number_generator(2, 5)
number_generator <- function(x, n) {
a <- 0
for(i in 1:n) {
a <- a + x
result <- c(result, a)
}
return(result)
}
number_generator(2, 5)
# 7. x만큼 간격이 있는 n개의 숫자
# number_generator함수는 x와 n을 입력 받습니다. 2와 5를 입력 받으면 2부터 시작해서
# 2씩 증가하는 숫자를 5개 가지는 리스트를 만들어서 리턴합니다. [2,4,6,8,10]
# 4와 3을 입력 받으면 4부터 시작해서 4씩 증가하는 숫자를 # 3개 가지는 리스트를
# 만들어서 리턴합니다. [4,8,12]
# 이를 일반화 하면 x부터 시작해서 x씩 증가하는 숫자를 n개 가지는 리스트를 리턴하도록
# 함수 number_generator를 완성하면 됩니다.
rm(result)
number_generator <- function(x, n) {
a <- 0
for(i in 1:n) {
a <- a + x
result <- c(result, a)
}
return(result)
}
number_generator(2, 5)
number_generator <- function(x, n) {
a <- 0
result <- c()
for(i in 1:n) {
a <- a + x
result <- c(result, a)
}
return(result)
}
number_generator(2, 5)
number_generator(4, 4)
number_generator <- function(x, n) {
result <- c()
for(i in 1:n) {
result <- c(result, x * i)
}
return(result)
}
number_generator(4, 4)
number_generator <- function(x, n) {
result <- c()
for(i in 1:n) {}
append(result, x*i)
}
number_generator <- function(x, n) {
result <- c()
for(i in 1:n) {
append(result, x*i)
}
return(result)
}
number_generator(4, 4)
result <- c()
append(result, 10)
append(result, 10)
number_generator <- function(x, n) {
result <- c()
for(i in 1:n) {
result <- append(result, x*i)
}
return(result)
}
number_generator(4, 4)
strange_sort <- function(strings, n) {
tmp <- data.frame(matrix(unlist(strsplit(strings, "")), nrow=length(strings), byrow=T))
tmp <- tmp %>% mutate(arr = sort(tmp[,n]))
tmp2 <- c()
result <- c()
for(i in 1:nrow(tmp)) {
tmp2 <- rbind(tmp2, subset(tmp[,-4], tmp[,n] == levels(tmp[,n])[i]))
char <- c()
for(k in 1:length(tmp2[i,])) {
char <- paste(char, tmp2[i,k], sep="")
}
result <- append(result, char)
}
return(result)
}
strings <- c("sun", "bed", "car")
strange_sort(strings, 2)
# 알고리즘 Level 1
library(stringr)
library(dplyr)
strange_sort <- function(strings, n) {
tmp <- data.frame(matrix(unlist(strsplit(strings, "")), nrow=length(strings), byrow=T))
tmp <- tmp %>% mutate(arr = sort(tmp[,n]))
tmp2 <- c()
result <- c()
for(i in 1:nrow(tmp)) {
tmp2 <- rbind(tmp2, subset(tmp[,-4], tmp[,n] == levels(tmp[,n])[i]))
char <- c()
for(k in 1:length(tmp2[i,])) {
char <- paste(char, tmp2[i,k], sep="")
}
result <- append(result, char)
}
return(result)
}
strings <- c("sun", "bed", "car")
strange_sort(strings, 2)
strings <- c("append", "abcd", "sidkf")
strange_sort(strings, 2)
strange_sort <- function(strings, n) {
tmp <- data.frame(matrix(unlist(strsplit(strings, "")), nrow=length(strings), byrow=T))
tmp <- tmp %>% mutate(arr = sort(tmp[,n]))
tmp2 <- c()
result <- c()
for(i in 1:nrow(tmp)) {
tmp2 <- rbind(tmp2, subset(tmp[,-4], tmp[,n] == levels(tmp[,n])[i]))
char <- c()
for(k in 1:length(tmp2[i,])) {
char <- paste(char, tmp2[i,k], sep="")
}
result <- append(result, char)
}
return(result)
}
strings <- c("append", "abcd", "sidkf")
strange_sort(strings, 2)
strange_sort(strings, 3)
strings <- c("apaend", "abcd", "sikkf")
strange_sort(strings, 3)
strange_sort(strings, 2)
strings <- c("sun", "bed", "car")
strange_sort(strings, 2)
tmp <- 0
tmp <- c(0, 1)
fibo <- funtion(n) {
tmp <- c(0, 1)
if(i > 2) {
for(i in 3:n){
tmp <- c(tmp[i-1] + tmp[i-2])
}
}
return(tmp[n])
}
fibo <- funtion(n) {
tmp <- c(0, 1)
if(n > 2) {
for(i in 3:n){
tmp <- c(tmp[i-1] + tmp[i-2])
}
}
return(tmp[n])
}
fibo <- funtion(n) {
tmp <- c(0, 1)
if(n > 2) {
for(i in 3:n){
tmp <- c(tmp, tmp[i-1] + tmp[i-2])
}
}
return(tmp[n])
}
fibo <- funtion(n) {
tmp <- c(0, 1)
if(n > 2) {
for(i in 3:n){
tmp <- c(tmp, tmp[i-1] + tmp[i-2])
}
}
return(tmp[n])
}
tmp <- c(0,1)
tmp[1]
tmp[2]
fibo <- funtion(n) {
tmp <- c(0, 1)
if(n > 2) {
for(i in 3:n){
tmp <- c(tmp, tmp[i-1] + tmp[i-2])
}
result <- tmp
} else if(n == 1) {
result <- tmp[2]
} else {
result <- tmp[1]
}
}
fibo <- function(n) {
tmp <- c(0, 1)
if(n > 2) {
for(i in 3:n){
tmp <- c(tmp, tmp[i-1] + tmp[i-2])
}
result <- tmp
} else if(n == 1) {
result <- tmp[2]
} else {
result <- tmp[1]
}
return(result)
}
fibo(3)
fibo <- function(n) {
tmp <- c(0, 1)
if(n > 2) {
for(i in 3:n){
tmp <- c(tmp, tmp[i-1] + tmp[i-2])
}
result <- tmp[n]
} else if(n == 1) {
result <- tmp[2]
} else {
result <- tmp[1]
}
return(result)
}
fibo(3)
fibo(4)
fibo(5)
fibo(6)
fibo <- function(n) {
result <- c(0, 1)
if(n > 2) {
for(i in 3:n){
result <- c(result, result[i-1] + result[i-2])
}
}
return(result[n])
}
fibo(6)
fibo(1)
fibo(2)
fibo(3)
fibo(4)
source('D:/Workspace-JWP/R_Data_Analysis/R-Lecture/Algorithm_Practice/R_Algorithm_Practice_Level_1.R', encoding = 'UTF-8', echo=TRUE)
fibo(5)
fibo(6)
fibo(7)
fibo <- function(n) {
a <- 0
b <- 1
if(n > 2) {
for(i in 3:n) {
a <- b
b <- a+b
}
}
return(a)
}
fibo(4)
fibo(5)
fibo(6)
fibo(5)
fibo(0)
fibo(1)
fibo <- function(n) {
a <- 0
b <- 1
if(n >= 2) {
for(i in 2:n) {
a <- b
b <- a+b
}
}
return(a)
}
fibo(1)
fibo(2)
fibo(3)
fibo(3)
fibo(7)
fibo <- function(n) {
result <- c(0, 1)
if(n > 2) {
for(i in 3:n){
result <- c(result, result[i-1] + result[i-2])
}
}
return(result[n])
}
fibo(7)
fibo(3)
fibo(4)
fibo(5)
fibo(6)
fibo(7)
