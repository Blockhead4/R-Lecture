for(i in 1:n) {
result <- append(result, x*i)
}
return(result)
}
number_generator(4, 4)
strange_sort <- function(strings, n) {
tmp <- data.frame(matrix(unlist(strsplit(strings, "")), nrow=length(strings), byrow=T))
tmp <- tmp %>% mutate(arr = sort(tmp[,n]))
tmp2 <- c()
result <- c()
for(i in 1:nrow(tmp)) {
tmp2 <- rbind(tmp2, subset(tmp[,-4], tmp[,n] == levels(tmp[,n])[i]))
char <- c()
for(k in 1:length(tmp2[i,])) {
char <- paste(char, tmp2[i,k], sep="")
}
result <- append(result, char)
}
return(result)
}
strings <- c("sun", "bed", "car")
strange_sort(strings, 2)
# 알고리즘 Level 1
library(stringr)
library(dplyr)
strange_sort <- function(strings, n) {
tmp <- data.frame(matrix(unlist(strsplit(strings, "")), nrow=length(strings), byrow=T))
tmp <- tmp %>% mutate(arr = sort(tmp[,n]))
tmp2 <- c()
result <- c()
for(i in 1:nrow(tmp)) {
tmp2 <- rbind(tmp2, subset(tmp[,-4], tmp[,n] == levels(tmp[,n])[i]))
char <- c()
for(k in 1:length(tmp2[i,])) {
char <- paste(char, tmp2[i,k], sep="")
}
result <- append(result, char)
}
return(result)
}
strings <- c("sun", "bed", "car")
strange_sort(strings, 2)
strings <- c("append", "abcd", "sidkf")
strange_sort(strings, 2)
strange_sort <- function(strings, n) {
tmp <- data.frame(matrix(unlist(strsplit(strings, "")), nrow=length(strings), byrow=T))
tmp <- tmp %>% mutate(arr = sort(tmp[,n]))
tmp2 <- c()
result <- c()
for(i in 1:nrow(tmp)) {
tmp2 <- rbind(tmp2, subset(tmp[,-4], tmp[,n] == levels(tmp[,n])[i]))
char <- c()
for(k in 1:length(tmp2[i,])) {
char <- paste(char, tmp2[i,k], sep="")
}
result <- append(result, char)
}
return(result)
}
strings <- c("append", "abcd", "sidkf")
strange_sort(strings, 2)
strange_sort(strings, 3)
strings <- c("apaend", "abcd", "sikkf")
strange_sort(strings, 3)
strange_sort(strings, 2)
strings <- c("sun", "bed", "car")
strange_sort(strings, 2)
tmp <- 0
tmp <- c(0, 1)
fibo <- funtion(n) {
tmp <- c(0, 1)
if(i > 2) {
for(i in 3:n){
tmp <- c(tmp[i-1] + tmp[i-2])
}
}
return(tmp[n])
}
fibo <- funtion(n) {
tmp <- c(0, 1)
if(n > 2) {
for(i in 3:n){
tmp <- c(tmp[i-1] + tmp[i-2])
}
}
return(tmp[n])
}
fibo <- funtion(n) {
tmp <- c(0, 1)
if(n > 2) {
for(i in 3:n){
tmp <- c(tmp, tmp[i-1] + tmp[i-2])
}
}
return(tmp[n])
}
fibo <- funtion(n) {
tmp <- c(0, 1)
if(n > 2) {
for(i in 3:n){
tmp <- c(tmp, tmp[i-1] + tmp[i-2])
}
}
return(tmp[n])
}
tmp <- c(0,1)
tmp[1]
tmp[2]
fibo <- funtion(n) {
tmp <- c(0, 1)
if(n > 2) {
for(i in 3:n){
tmp <- c(tmp, tmp[i-1] + tmp[i-2])
}
result <- tmp
} else if(n == 1) {
result <- tmp[2]
} else {
result <- tmp[1]
}
}
fibo <- function(n) {
tmp <- c(0, 1)
if(n > 2) {
for(i in 3:n){
tmp <- c(tmp, tmp[i-1] + tmp[i-2])
}
result <- tmp
} else if(n == 1) {
result <- tmp[2]
} else {
result <- tmp[1]
}
return(result)
}
fibo(3)
fibo <- function(n) {
tmp <- c(0, 1)
if(n > 2) {
for(i in 3:n){
tmp <- c(tmp, tmp[i-1] + tmp[i-2])
}
result <- tmp[n]
} else if(n == 1) {
result <- tmp[2]
} else {
result <- tmp[1]
}
return(result)
}
fibo(3)
fibo(4)
fibo(5)
fibo(6)
fibo <- function(n) {
result <- c(0, 1)
if(n > 2) {
for(i in 3:n){
result <- c(result, result[i-1] + result[i-2])
}
}
return(result[n])
}
fibo(6)
fibo(1)
fibo(2)
fibo(3)
fibo(4)
source('D:/Workspace-JWP/R_Data_Analysis/R-Lecture/Algorithm_Practice/R_Algorithm_Practice_Level_1.R', encoding = 'UTF-8', echo=TRUE)
fibo(5)
fibo(6)
fibo(7)
fibo <- function(n) {
a <- 0
b <- 1
if(n > 2) {
for(i in 3:n) {
a <- b
b <- a+b
}
}
return(a)
}
fibo(4)
fibo(5)
fibo(6)
fibo(5)
fibo(0)
fibo(1)
fibo <- function(n) {
a <- 0
b <- 1
if(n >= 2) {
for(i in 2:n) {
a <- b
b <- a+b
}
}
return(a)
}
fibo(1)
fibo(2)
fibo(3)
fibo(3)
fibo(7)
fibo <- function(n) {
result <- c(0, 1)
if(n > 2) {
for(i in 3:n){
result <- c(result, result[i-1] + result[i-2])
}
}
return(result[n])
}
fibo(7)
fibo(3)
fibo(4)
fibo(5)
fibo(6)
fibo(7)
a <- 18
b <- 24
an <- c()
bn <- c()
for(i in 1:a) { if(a %% i == 0) an <- append(an, i) }
for(i in 1:b) { if(b %% i == 0) bn <- append(bn, i) }
an
bn
max(subset(an, an %in% bn))
alpha_string46 <- function(s) {
if((nchar(s) == 4 | nchar(s) == 6) & grepl("[A-Za-z]", s) == F) {
return(T)
} else {
return(F)
}
}
alpha_string46(s)
s <- 1234
alpha_string46(s)
s <- "a1234"
alpha_string46(s)
numPY("YYYyyyppp")
numPY <- function(s) {
if(str_count(tolower(s), "p") == str_count(tolower(s), "y")) return(T)
return(F)
}
numPY("YYYyyyppp")
numPY("YyYwedppP")
# 알고리즘 Level 1
library(stringr)
numPY <- function(s) {
if(str_count(tolower(s), "p") == str_count(tolower(s), "y")) return(T)
return(F)
}
numPY("YYYyyyppp")
numPY("YyYwedppP")
printTriangle <- function(num) {
star <- c()
for(i in 1:num) {
star <- paste(star, "*")
print(star)
}
}
printTriangle(3)
printTriangle(5)
strToInt <- function(str) {
return(as.numeric(str))
}
a <- strToInt("-1234")
a
class(a)
sumMatrix <- function(a, b) {
return(a+b)
}
a <- matrix(c(1:9), nrow=3, byrow=T); a
b <- matrix(c(2:10), nrow=3, byrow=T); b
sumMatrix(a, b)
secureNum <- function(num) {
hide <- c()
for(i in 1:nchar(str_sub(num, end=-5))) {
hide <- paste(hide, "*", sep="")
}
return(str_replace_all(num, str_sub(num, end=-5), hide))
}
a <- "0212341234"
secureNum(a)
number_generator <- function(x, n) {
result <- c()
for(i in 1:n) {
result <- append(result, x*i)
}
return(result)
}
number_generator(4, 4)
defaverage <- function(list) {
return(mean(list))
}
def_average <- function(list) {
return(mean(list))
}
list = c(3,2)
def_average(list)
list = c(3,2,5,20,10)
def_average(list)
rm_small <- function(mylist) {
return(mylist[-grep(min(mylist), mylist)])
}
mylist <- c(10,22, 8)
rm_small(mylist)
evenOrOdd <- function(num) {
return(ifelse(num <= 0, "양의 정수를 입력하시오.",
ifelse(num %% 2 == 0, "Even", "Odd")))
}
num <- 4
evenOrOdd(num)
findKim <- function(seoul) {
return(paste("김서방은 ", grep("Kim", seoul), "에 있다"))
}
seoul <- c("tod", "Kim", "kid")
findKim(seoul)
nextSqaure <- function(n) {
return(ifelse(ceiling(sqrt(n)) - sqrt(n) < 1e-10, (n+1)^2, "no"))
}
n <- 9
nextSqaure(n)
n <- 4
nextSqaure(n)
sum_digit <- function(num) {
return(sum(as.numeric(unlist(strsplit(as.character(num), "")))))
}
num <- 1234
sum_digit(num)
num <- 123456
sum_digit(num)
water_melon <- function(n) {
result <- ""
ifelse(n %% 2 == 0 , result <- str_dup("수박", as.integer(n/2)),
result <- paste("수", str_dup("박수", as.integer((n-1)/2)), sep=""))
return(result)
}
water_melon(6)
no_continuous <- function(s) {
char <- unlist(strsplit(s, ""))
result <- char[1]
for(i in 1:(nchar(s)-1)) {
if(char[i] != char[i+1]) {
result <- append(result, char[i+1])
}
}
return(result)
}
s <- "133303"
no_continuous(s)
a <- "47330"
no_continuous(a)
strange_sort <- function(strings, n) {
tmp <- data.frame(matrix(unlist(strsplit(strings, "")), nrow=length(strings), byrow=T))
tmp <- tmp %>% mutate(arr = sort(tmp[,n]))
tmp2 <- c()
result <- c()
for(i in 1:nrow(tmp)) {
tmp2 <- rbind(tmp2, subset(tmp[,-4], tmp[,n] == levels(tmp[,n])[i]))
char <- c()
for(k in 1:length(tmp2[i,])) {
char <- paste(char, tmp2[i,k], sep="")
}
result <- append(result, char)
}
return(result)
}
strings <- c("apaend", "abcd", "sikkf")
strange_sort(strings, 3)
strings <- c("sun", "bed", "car")
strange_sort(strings, 2)
ifelse(length(an) <= length(bn), max(subset(an, an %in% bn)), max(subset(bn, bn %in% an)))
a <- 24
b <- 18
an <- c()
bn <- c()
for(i in 1:a) { if(a %% i == 0) an <- append(an, i) }
for(i in 1:b) { if(b %% i == 0) bn <- append(bn, i) }
ifelse(length(an) <= length(bn), max(subset(an, an %in% bn)), max(subset(bn, bn %in% an)))
maxn <- ifelse(length(an) <= length(bn), max(subset(an, an %in% bn)), max(subset(bn, bn %in% an)))
ad <- a/maxn
ad
bd <- b/maxn
bd
ad*bd*maxn
minn <- ad*bd*maxn
print(c(maxn, minn))
gcdlcm <- function(a, b) {
an <- c()
bn <- c()
for(i in 1:a) { if(a %% i == 0) an <- append(an, i) }
for(i in 1:b) { if(b %% i == 0) bn <- append(bn, i) }
maxn <- ifelse(length(an) <= length(bn), max(subset(an, an %in% bn)), max(subset(bn, bn %in% an)))
ad <- a/maxn
bd <- b/maxn
minn <- ad*bd*maxn
print(c(maxn, minn))
}
gcdlm(24, 18)
a <- 24
b <- 18
gcdlcm <- function(a, b) {
an <- c()
bn <- c()
for(i in 1:a) { if(a %% i == 0) an <- append(an, i) }
for(i in 1:b) { if(b %% i == 0) bn <- append(bn, i) }
maxn <- ifelse(length(an) <= length(bn), max(subset(an, an %in% bn)), max(subset(bn, bn %in% an)))
ad <- a/maxn
bd <- b/maxn
minn <- ad*bd*maxn
return(c(maxn, minn))
}
gcdlm(24, 18)
gcdlcm <- function(a, b) {
an <- c()
bn <- c()
for(i in 1:a) { if(a %% i == 0) an <- append(an, i) }
for(i in 1:b) { if(b %% i == 0) bn <- append(bn, i) }
maxn <- ifelse(length(an) <= length(bn), max(subset(an, an %in% bn)), max(subset(bn, bn %in% an)))
ad <- a/maxn
bd <- b/maxn
minn <- ad*bd*maxn
return(c(maxn, minn))
}
gcdlcm <- function(a, b) {
an <- c()
bn <- c()
for(i in 1:a) { if(a %% i == 0) an <- append(an, i) }
for(i in 1:b) { if(b %% i == 0) bn <- append(bn, i) }
maxn <- ifelse(length(an) <= length(bn), max(subset(an, an %in% bn)), max(subset(bn, bn %in% an)))
ad <- a/maxn
bd <- b/maxn
minn <- ad*bd*maxn
return(c(maxn, minn))
}
a <- 24
b <- 18
gcdlcm <- function(a, b) {
an <- c()
bn <- c()
for(i in 1:a) { if(a %% i == 0) an <- append(an, i) }
for(i in 1:b) { if(b %% i == 0) bn <- append(bn, i) }
maxn <- ifelse(length(an) <= length(bn), max(subset(an, an %in% bn)), max(subset(bn, bn %in% an)))
ad <- a/maxn
bd <- b/maxn
minn <- ad*bd*maxn
return(c(maxn, minn))
}
gcdlm(24, 18)
gcdlm(a, b)
gcdlcm(a,b)
gcdlcm(a, b)
gcdlcm <- function(a, b) {
an <- c()
bn <- c()
for(i in 1:a) { if(a %% i == 0) an <- append(an, i) }
for(i in 1:b) { if(b %% i == 0) bn <- append(bn, i) }
gcd <- ifelse(length(an) <= length(bn), max(subset(an, an %in% bn)), max(subset(bn, bn %in% an)))
ad <- a/maxn
bd <- b/maxn
lcm <- ad*bd*maxn
return(c(gcd, lcm))
}
a <- 24
b <- 18
gcdlcm(a, b)
gcdlcm <- function(a, b) {
an <- c()
bn <- c()
for(i in 1:a) { if(a %% i == 0) an <- append(an, i) }
for(i in 1:b) { if(b %% i == 0) bn <- append(bn, i) }
gcd <- ifelse(length(an) <= length(bn), max(subset(an, an %in% bn)), max(subset(bn, bn %in% an)))
ad <- a/gcd
bd <- b/gcd
lcm <- ad*bd*maxn
return(c(gcd, lcm))
}
a <- 24
b <- 18
gcdlcm(a, b)
gcdlcm <- function(a, b) {
an <- c()
bn <- c()
for(i in 1:a) { if(a %% i == 0) an <- append(an, i) }
for(i in 1:b) { if(b %% i == 0) bn <- append(bn, i) }
gcd <- ifelse(length(an) <= length(bn), max(subset(an, an %in% bn)), max(subset(bn, bn %in% an)))
ad <- a/gcd
bd <- b/gcd
lcm <- ad*bd*gcd
return(c(gcd, lcm))
}
a <- 24
b <- 18
gcdlcm(a, b)
gcdlcm <- function(a, b) {
an <- c()
bn <- c()
for(i in 1:a) { if(a %% i == 0) an <- append(an, i) }
for(i in 1:b) { if(b %% i == 0) bn <- append(bn, i) }
gcd <- ifelse(length(an) <= length(bn), max(subset(an, an %in% bn)), max(subset(bn, bn %in% an)))
ad <- a/gcd
bd <- b/gcd
lcm <- ad*bd*gcd
return(c(gcd, lcm))
}
a <- 18
b <- 24
gcdlcm(a, b)
