cat(1, NULL, 2)     # NULL은 출력되지 않음(연산 불포함)
sum(1, NA, 2)         # NA : 잘못된 값이 들어올 경우(Not Available, Not Applicable)
sum(1, NULL, 2)       # NULL : 값이 없을 경우
class(NA)
class(NULL)
setwd("d:/Workspace/R_Data_Analysis/Part3/data")
txt1 <- read.csv("factor_test.csv")
string4 <- "He said, \"I am single\"."; string4    # 백슬래쉬는 어떤 명령어의 효력을 상실시킴
date2 <- seq(from=as.Date('2014-01-01'),to=as.Date('2014-12-31'),by='month'); date2
date3 <- seq(from=as.Date('2014-01-01'),to=as.Date('2020-12-31'),by='year'); date3
date4 <- seq(from=as.Date('2014-01-01'),to=as.Date('2014-01-31'),by='day'); date4
rm(list=ls())   # 모든 변수 삭제(숨김 변수는 삭제되지 않음)
append(vec1,10,after=3)   # 벡터에 새로운 요소를 추가
vec1 <- c(1,2,3,4,5); vec1
append(vec1,10,after=3)   # 벡터에 새로운 요소를 추가
append(vec1,13,after=5)
append(vec1,c(10,13),after=3)
append(vec1,13,after=0)   # 0은 가장 앞자리라는 특별한 의미가 있음
append(vec1, 22, after=-1)
append(vec1, 22, after=0)
append(vec1, 22, after=10)
append(vec1, 22, length(vec1))
c(1,2,3) + c(4,5,6)
c(1,2,3) + 1
var1 + var2
var1 <- c(1,2,3)
var2 <- c(4,5,6)
var1 + var2
var3 <- c('3','4','5'); var3
union(var1,var3)    # 데이터형이 다른 두 벡터를 합함
class(union(var1,var3))
var4 <- c(1,2,3,4,5)  # 두 벡터의 길이가 다를 경우 순환원리 적용
var1 + var4
var1 <- c(1,2,3)
var4 <- c(1,2,3,4,5)  # 두 벡터의 길이가 다를 경우 순환원리 적용
var1 + var4
var5 <- c(1,2,3,4,5,6)
var1 + var5
var2 <- c(3,4,5)
var1 - var2
setdiff(var1,var2)      # var1에는 있지만 var2에는 없는 요소 출력
setdiff(var2,var1)      # var2에는 있지만 var1에는 없는 요소 출력
intersect(var1,var2)    # 공통요소 출력
intersect(var2,var1)
var5 <- seq(1:6); var5
var6 <- seq(2,-2); var6
even <- seq(2,10,2); even    # seq(시작값, 끝값, 증가분)
odd <- seq(1,10,2); odd
5 %in% even    # 앞에있는 값이 뒤에 있는 변수에 잇는지 확인
4 %in% even
mat4 <- matrix(seq(1:9),nrow=3,byrow=T); mat4
mat4 <- rbind(mat4, c(11,12,13)); mat4            # 아래쪽으로 행 추가(길이가 안 맞으면 에러 발생)
mat4 <- cbind(mat4, c(13,14,15,16)); mat4         # 오른쪽으로 열 추가
mat5 <- matrix(c('a','b','c','d'),nrow=2,byrow=T); mat5
mat5 <- cbind(mat5,c('e','f')); mat5
mat2 <- matrix(c(1,2,3,4),nrow=2); mat2               # Matrix 입력 우선순위 디폴트 값은 행우선임
mat3 <- matrix(c(1,2,3,4),nrow=2,byrow=T); mat3       # byrow=T 열 우선순위로 바꿔줌
sales2 <- matrix(c(1,'Apple',500,5,
2,'Peach',200,2,
3,'Banana',100,4,
4,'Grape',50,7),nrow=4,byrow=T)
sales[c(1,2),]      # 특정 행과 열을 출력
sales <- data.frame(NO=no,NAME=name,PRICE=price,QTY=qty)
sales
sales2 <- matrix(c(1,'Apple',500,5,
2,'Peach',200,2,
3,'Banana',100,4,
4,'Grape',50,7),nrow=4,byrow=T)
sales2
no <- seq(1:4)
name <- c('Apple','Peach','Banana','Grape')
price <- c(500,200,100,50)
qty <- c(5,2,4,7)
sales <- data.frame(NO=no,NAME=name,PRICE=price,QTY=qty)
sales
sales2 <- matrix(c(1,'Apple',500,5,
2,'Peach',200,2,
3,'Banana',100,4,
4,'Grape',50,7),nrow=4,byrow=T)
sales2
df1 <- data.frame(sales2); df1
names(df1) <- c('NO','NAME','PRICE','QTY'); df1
sales$NAME
df1 <- data.frame(sales2); df1
names(df1) <- c('NO','NAME','PRICE','QTY'); df1
sales$NAME
sales[1,3]
sales[,3]
sales[c(1,2),]      # 특정 행과 열을 출력
sales[,c(1,2)]
sales[,c(1:3)]
subset(sales,QTY<5)        # 특정 조건에 맞는 데이터만 출력
subset(sales,PRICE==200)
subset(sales,PRICE!=200)
subset(sales,name=='Apple')    # 조건이 문자일 경우 반드시 홑따옴표나 쌍따옴표로 처리
no <- c(1,2,3)
name <- c('apple','banana','peach')
price <- c(100,200,300)
df1 <- data.frame(NO=no,NAME=name,PRICE=price); df1
no <- c(10,20,30)
name <- c('train','car','airplane')
price <- c(1000,2000,3000)
df2 <- data.frame(NO=no,NAME=name,PRICE=price); df2
df3 <- cbind(df1,df2); df3
df3$NAME    # 앞에 있는 NAME 요소만 출력
df3[,5]     # 5열 출력
df4 <- rbind(df1,df2); df4
df4$NAME
df5 <- data.frame(name=c('apple','banana','cherry'),price=c(300,200,100)); df5
df6 <- data.frame(name=c('apple','cherry','berry'),qty=c(10,20,30)); df6
df3$NAME    # 앞에 있는 NAME 요소만 출력
df5 <- data.frame(name=c('apple','banana','cherry'),price=c(300,200,100)); df5
df6 <- data.frame(name=c('apple','cherry','berry'),qty=c(10,20,30)); df6
merge(df5,df6)           # df1 기준으로 df2와 공통으로 있는 name 컬럼 데이터를 출력
merge(df5,df6,all=T)     # 데이터가 없는것도 모두 나오도록 출력
rbind(df5,df6)     # name이 달라서 에러
cbind(df5,df6)
cbind(df6,df5)
df5 <- data.frame(name=c('apple','banana','cherry'),price=c(300,200,100)); df5
df6 <- data.frame(name=c('apple','cherry','berry'),qty=c(10,20,30)); df6
merge(df5,df6)           # df5 기준으로 df6와 공통으로 있는 name 컬럼 데이터를 출력
merge(df5,df6,all=T)     # 데이터가 없는것도 모두 나오도록 출력
df5
new <- data.frame(name='mango',price=400)
df5 <- rbind(df5,new); df5
df5 <- cbind(df5,data.frame(qty=seq(10,40,10))); df5
member2 <- subset(member,select=c(NO,NAME,TEL)); member2     # 특정 칼럼만 출력
member3 <- subset(member,select=-TEL); member3               # 특정 칼럼만 제외하고 출력
colnames(member3) <- c('번호','이름','주소','취미'); member3      # 칼럼 이름 변경
list.files()     # Working Directory 파일들을 보여줌
list.files(recursive = T)     # Working Directory 포함 하위 디렉터리 파일들을 보여줌
list.files(all.files = T)     # 숨김 파일까지 전부 보여줌
scan1 <- scan('scan_1.txt'); scan1      # 텍스트 파일안의 내용을 변수에 저장(기본적으로 배열로 저장)
list.files(recursive = T)     # Working Directory 포함 하위 디렉터리 파일들을 보여줌
scan1 <- scan('data/scan_1.txt'); scan1      # 텍스트 파일안의 내용을 변수에 저장(기본적으로 배열로 저장)
scan1 <- scan('data/scan_1.txt'); scan1      # 텍스트 파일안의 내용을 변수에 저장(기본적으로 배열로 저장)
scan2 <- scan('data/scan_2.txt'); scan2      # 1.00  2.00  3.00  4.00
scan2 <- scan('data/scan_2.txt',what=""); scan2    # 실수와 문자를 호출할 때는 what 옵션을 사용해야 함
scan3 <- scan('data/scan_3.txt',what=""); scan3
scan4 <- scan('data/scan_4.txt',what=""); scan4
input1 <- scan()      # scan() 함수에 입력값을 주지 않으면 사용자에게 입력을 받겠다는 의미
input1
input2 <- scan(what="")      # 문자로 입력받을 때는 what="" 꼭 사용
input2 <- scan(what="")      # 문자로 입력받을 때는 what="" 꼭 사용
input2
input3 <- readline()
ekdsfs''
efsfs
input4 <- readline("Are you OK? :")    # readline("화면에 출력할 내용")
input4 <- readline("Are you OK? :")    # readline("화면에 출력할 내용")
input4
input5 <- readLines('scan_4.txt'); input5    # 파일 읽어 들여서 여러 행을 하나의 행 배열로 담음
input5 <- readLines('data/scan_4.txt'); input5    # 파일 읽어 들여서 여러 행을 하나의 행 배열로 담음
setwd("C:\Users\Jinweon_Park\Desktop\work_space\R-Lecture\data")
setwd("C:/UsersJinweon_Park/Desktop/work_space/R-Lecture/data")
setwd("C:/UsersJinweon_Park/Desktop/work_space/R-Lecture/data")
setwd("C:/Users/Jinweon_Park/Desktop/work_space/R-Lecture/data")
scan1 <- scan('scan_1.txt'); scan1      # 텍스트 파일안의 내용을 변수에 저장(기본적으로 배열로 저장)
scan2 <- scan('scan_2.txt'); scan2      # 1.00  2.00  3.00  4.00
scan2 <- scan('scan_2.txt',what=""); scan2    # 실수와 문자를 호출할 때는 what 옵션을 사용해야 함
input5 <- readLines('scan_4.txt'); input5    # 파일 읽어 들여서 여러 행을 하나의 행 배열로 담음
fruits <- read.table('fruits.txt'); fruits   # 일반 텍스트 형태의 파일을 데이터 프레임에 담기
fruits <- read.table('fruits.txt',header=T); fruits      # header=T로 열 이름 설정
fruit2 <- read.table('fruits_2.txt',skip=2); fruit2        # 건너 뛸 줄 수를 지정
fruit2 <- read.table('fruits_2.txt',skip=3); fruit2
fruit2 <- read.table('fruits_2.txt',nrows=2); fruit2       # 출력할 줄 수를 지정
fruit2 <- read.table('fruits_2.txt',skip=3,nrows=2); fruit2      # 세번째 줄부터 2줄만 출력
fruit3 <- read.table('fruits.txt',header=T,nrows=2); fruit3
fruit3 <- read.table('fruits.txt',header=F,skip=2,nrows=2); fruit3
fruit3 <- read.csv('fruits_3.csv'); fruit3      # csv파일은 txt파일과 다르게 헤더가 있다는 전제가 디폴트
fruit4 <- read.csv('fruits_4.csv'); fruit4
fruit4 <- read.csv('fruits_4.csv',header=F); fruit4      # 헤더가 없는 경우
label <- c('NO','NAME','PRICE','QTY')
fruit4 <- read.csv('fruits_4.csv',header=F,col.names=label); fruit4     # 헤더를 수동으로 직접 지정
install.packages('googleVis')     # 원하는 데이터를 SQL쿼리로 불러오기
library(googleVis)
sort1 <- Fruits$Sales; sort1
sort(sort1)     # Ascending Order (오름차순 정렬)
sort(sort1, decreasing = T)     # Descending Order (내림차순 정렬)
?ddply
aggregate(Sales~Year,Fruits,sum)      # aggregate(계산될 칼럼 ~ 기준될 칼럼, 데이터, 함수) / Year별 Sales 합계
aggregate(Sales~Year+Fruit,Fruits,max)      # '+ 추가조건' 형태로 조건을 추가 / Year, Fruit별 Sales 최대값
mat1 <- matrix(c(1:6),nrow=2,byrow=T); mat1
apply(mat1,1,sum)       # apply(범위대상, 행/열(1/2), 적용함수) / 각 행의 합계
apply(mat1,2,sum)       # 각 열의 합계
apply(mat1,1,prod)      # 각 행의 요소들의 곱
apply(mat1[,c(2,3)],1,sum)    # 2, 3열의 행 단위 합계
apply(mat1[,c(2,3)],2,sum)    # 2, 3열의 열 단위 합계
Fruits
lapply(Fruits[,c(4,5)],max)   # 데이터 레이블이 표시되어 가시성이 좋음
sapply(Fruits[,c(4,5)],max)
apply(Fruits[,c(4,5)],2,max)
# lapply / sapply(대상, 적용함수)
lapply(c(list1,list2),max)    # list1과 list2에서 max 값을 구해 list 형태로 출력
list1 <- list(Fruits$Sales); list1
list2 <- list(Fruits$Profit); list2
# lapply / sapply(대상, 적용함수)
lapply(c(list1,list2),max)    # list1과 list2에서 max 값을 구해 list 형태로 출력
sapply(c(list1,list2),max)    # list1과 list2에서 max 값을 구해 vector 형태로 출력
# tapply(출력값, 기준컬럼, 적용함수) / mapply(함수, 벡터1, 벡터2, ...)
tapply(Sales,Fruit,sum)
# tapply(출력값, 기준컬럼, 적용함수) / mapply(함수, 벡터1, 벡터2, ...)
tapply(Sales,Fruits,sum)
Fruits
# tapply(출력값, 기준컬럼, 적용함수) / mapply(함수, 벡터1, 벡터2, ...)
tapply(Sales,Fruits,sum)
attach(Fruits)      # attach()는 각 컬럼 이름을 '변수명'처럼 처리해서 데이터를 쉽게 관리하게 하는 기능
attach(Fruits)      # attach()는 각 컬럼 이름을 '변수명'처럼 처리해서 데이터를 쉽게 관리하게 하는 기능
tapply(Sales, Fruit, sum)
tapply(Sales, Year, sum)
vec1 <- seq(1,5)
vec2 <- seq(10,50,10)
vec3 <- seq(100,500,100)
mapply(sum,vec1,vec2,vec3)
vec1 <- seq(1,5); vec1
vec2 <- seq(10,50,10); vec2
vec3 <- seq(100,500,100); vec3
mapply(sum,vec1,vec2,vec3)
mat1 <- matrix(seq(1,6,1),nrow=2,byrow=T); mat1
a <- rep(1,3); a
sweep(mat1,2,a)     # 1: 행 단위로 계산 / 2: 열 단위로 계산
b <- matrix(c(2,3)); b
sweep(mat1,1,b)
a <- seq(1,6,1); length(a)   # 벡터의 길이 출력
mat1
length(mat1)       # 가로 * 세로 개수 출력
Fruits
length(Fruits)     # 데이터 프레임의 경우 열의 개수 출력
log(10)
log10(10)
sin(pi)
choose(5,3)      # 5 combination 3: 5개 중에 3개를 뽑는 경우의 수
myAbs <- function(x) {
if (x >= 0) {
return(x)
} else {
return(-x)
}
}
myAbs(-3.2)
myAbs(4.5)
myAbs2 <- function(x) {
if (x >= 0) {
return(x)
}
return(-x)
}
myAbs2(-3.2)
myF1 <- function(x) {
if (x > 0) {
return(x^2)
}
return(0)
}
myF1(4.4)
myF1(-1)
myF1(0)
while (no < 5) {
print(no)
no <- no + 1
}
no <- 0
while (no < 5) {
print(no)
no <- no + 1
}
x <- 1
while (x < 5) {
x <- x + 1
if (x == 4)
break
print(x)
}
while (x < 5) { x <- x + 1; if (x == 4) break; print(x); }    # 한 줄로 표현
while (x < 5) { x <- x + 1; if (x == 4) break; print(x); }    # 한 줄로 표현
x <- 1
while (x < 5) { x <- x + 1; if (x == 4) break; print(x); }    # 한 줄로 표현
x <- 1
while (x < 5) { x <- x + 1; if (x == 4) break; print(x); }    # 한 줄로 표현
n <- -1
while (n <= 10) {
n <- n + 1
if (n %% 2 == 1)
next
print(n)
}
n <- 1
while (n <= 10) {
if (10 %% n == 0)
print(n)
n <- n + 1
}
# 약수 찾기 - while 문
fn <- function(n) {
i = 0
while (i <= n) {
i <- i + 1
if (n %% i== 0)
print(i)
}
}
fn(12)
# 약수 찾기 - for 문
getDenominator <- function(x) {
den <- c(1)
if (x >= 2) {
for (i in 2:x) {
if (x %% i ==0)
den <- c(den, i)
}
}
return(den)
}
return(den)
getDenominator(10)
for (i in 1:10) {
print(i)
}
for (i in 1:10) print(i)
sum <- 0
for (i in 1:100) {
sum <- sum + i
}
print(sum)
sum <- 0
for (i in seq(3, 100, 3)) {
sum = sum + i
}
print(sum)
sum<-0
for (i in seq(1, 0, 1)) {
sum = sum + i
}
print(sum)
sum<-0
for (i in seq(1, 0, 1)) {
sum = sum + i
}
print(sum)
for (i in c(1,3,5,7,100)) {
print(i)
}
fn1 = function(limit, num) {
sum = 0
for (i in 1:limit) {
if (i %% num == 0)
sum = sum + i
}
return(sum)
}
fn1(1000, 3)
fn1(1000, 5)
fn2 <- function(n) {
for (i in 1:(n/3)*3) {
print(i)
}
}
fn2(10)
library(stringr)
for (i in 1:5) {
line <- ''
for (k in 1:i) {
line <- str_c(line, '#')
}
print(line)
}
for (i in 5:1) {
line <- ''
for (k in 1:i) {
line <- str_c(line, '#')
}
print(line)
}
# 삼각형 거꾸로 그리기 --- 이해 요망 ---
for (i in 1:5) {
line <- ''
if (i != 1) {
for (k in 1:(i-1)) {
line <- str_c(line, ' ')
}
}
for (k in i:5) {
line <- str_c(line, '#')
}
print(line)
}
# 약간 기울어진 마름모 그리기
for (i in 1:9) {
line <- ''
if (i <= 5) {
for (k in 1:i) {
line <- str_c(line, '#')
}
print(line)
} else {
for (k in 5:(i-1)) {
line <- str_c(line, ' ')
}
for (k in i:9) {
line <- str_c(line, '#')
}
print(line)
}
}
# 다이아몬드 그리기
for (i in 1:7) {
line <- ''
if (i < 4) {
for (k in (4-i):1) {
line <- str_c(line, ' ')
}
for (k in 1:(i*2-1)) {
line <- str_c(line, '#')
}
print(line)
} else if (i > 4) {
for (k in 5:i) {
line <- str_c(line, ' ')
}
for (k in ((10-i)*2-1):5) {
line <- str_c(line, '#')
}
print(line)
} else {
line <- str_c(line, '#######')
print(line)
}
}
# 좀 더 짧게 만들기 : i != 4 이용
for (i in 1:7) {
line <- ''
if (i < 4) {
for (k in (4-i):1) {
line <- str_c(line, ' ')
}
for (k in 1:(i*2-1)) {
line <- str_c(line, '#')
}
print(line)
} else if (i > 4) {
for (k in 5:i) {
line <- str_c(line, ' ')
}
for (k in ((10-i)*2-1):5) {
line <- str_c(line, '#')
}
print(line)
} else {
line <- str_c(line, '#######')
print(line)
}
}
str_c(line, '#', '#')
print(line)
for (i in 2:9) {
cat(i, '단', '\n')
for(k in 1:9) {
cat(i, " * ", k, " = ", i*k , '\n')
}
cat('\n')
}
?Filter
?nchar
?Filter
grep('apple', char)
# grep(pattern, a) : 벡터 a 에서 특정 패턴의 위치 출력
char <- c('apple', 'Apple', 'APPLE', 'banana', 'grape'); char
grep('apple', char)
char2 <- c('apple', 'banana'); char2
grep(char2, char)
grep(paste(char2, collapse='|'), char, value=T)     # value = T  값 자체를 출력
char2 <- c('apple', 'banana'); char2
grep(char2, char)
grep(paste(char2, collapse='|'), char, value=T)     # value = T  값 자체를 출력
grep('pp', char)
grep('pp', char, value=T)
grep('^A', char, value=T)
grep('e$', char, value=T)
grep('[1-9]', char2, value=T)            # 숫자 포함된 단어
grep('[0-9]', char2, value=T)            # 위와 같은 결과
grep('\\d', char2, value=T)              # 위와 같은 결과
char2 <- c('grape1', 'apple1', 'apple', 'orange', 'Apple'); char2
grep('ap', char2, value=T)
grep('[1-9]', char2, value=T)            # 숫자 포함된 단어
grep('[0-9]', char2, value=T)            # 위와 같은 결과
grep('\\d', char2, value=T)              # 위와 같은 결과
grep('[[:upper:]]', char2, value=T)      # 대문자가 포함된 단어
grep('[A-Z]', char2, value=T)            # 위와 같은 결과
# nchar(a) : 입력된 배열이나 문자의 길이를 출력
nchar(char)
nchar('James seo')
nchar('서진수')
# paste('a', 'b', 'c') : a 와 b 와 c를 합쳐서 하나의 문자열처럼 출력
paste('Seo', 'Jin', 'Su')               # 기본 값은 각 값들 사이에 공백을 출력
paste('Seo', 'Jin', 'Su', sep='')       # 자동 삽입 공백을 없앰
paste('Seo', 'Jin', 'Su', sep='/')      # 구분자를 지정
paste('I', '\'m', 'Hungry')             # 특수문자가 있을 경우 Escape character (\) 를 써야 함
# sunbstr('a', 시작 위치, 끝나는 위치) : 배열 a 에서 시작부분부터 끝부분 까지 글자를 출력
substr('abc123', 3, 3)
substr('abc123', 3, 4)
# strsplit('문자열', split = '기준문자') : 문자열에서 split 부분의 글자를 기준으로 분리
strsplit('2014/11/22', split='/')
# regexpr('pattern'.text) : text 에서 패턴이 가장 먼저 나오는 위치값을 출력
grep('-', '010-8706-4712')      # grep 으로는 위치 찾기 불가능
regexpr('-', '010-8706-4712')      # 위치값, 길이, ?? 순서로 출력
# strsplit('문자열', split = '기준문자') : 문자열에서 split 부분의 글자를 기준으로 분리
strsplit('2014/11/22', split='/')
# regexpr('pattern'.text) : text 에서 패턴이 가장 먼저 나오는 위치값을 출력
grep('-', '010-8706-4712')      # grep 으로는 위치 찾기 불가능
regexpr('-', '010-8706-4712')      # 위치값, 길이, ?? 순서로 출력
alert <- readLines("data/oracle_alert_testdb.log")
alert <- readLines("data/oracle_alert_testdb.log")
